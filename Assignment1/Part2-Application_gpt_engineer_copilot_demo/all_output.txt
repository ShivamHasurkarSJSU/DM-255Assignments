Based on the requirements, here are the core classes, functions, and methods that will be necessary:

1. `Game` class:
   - `__init__()`: Initialize the game state and GUI.
   - `start_game()`: Start a new game.
   - `make_move(row, col)`: Handle a player's move.
   - `check_win()`: Check if a player has won the game.
   - `check_draw()`: Check if the game is a draw.
   - `reset_board()`: Reset the game board.
   - `draw_board()`: Draw the tic tac toe board on the GUI.
   - `draw_mark(row, col)`: Draw a player's mark on the GUI.
   - `show_message(message)`: Display a message on the GUI.
   - `play_again()`: Handle the "play again" button click.

2. `Player` class:
   - `__init__(name, mark)`: Initialize a player with a name and mark.
   - `get_move()`: Get the player's move from the GUI.

Now let's proceed with implementing the code.

**game.py**
```python
import tkinter as tk
from tkinter import messagebox

class Game:
    def __init__(self):
        self.board = [[' ' for _ in range(3)] for _ in range(3)]
        self.current_player = None
        self.players = []
        self.root = tk.Tk()
        self.canvas = tk.Canvas(self.root, width=300, height=300)
        self.canvas.pack()
        self.canvas.bind("<Button-1>", self.handle_click)
        self.start_game()

    def start_game(self):
        self.reset_board()
        self.players = [
            Player("Player 1", "X"),
            Player("Player 2", "O")
        ]
        self.current_player = self.players[0]
        self.draw_board()
        self.show_message(f"{self.current_player.name}'s turn")

    def make_move(self, row, col):
        if self.board[row][col] == ' ':
            self.board[row][col] = self.current_player.mark
            self.draw_mark(row, col)
            if self.check_win():
                self.show_message(f"{self.current_player.name} wins!")
                self.canvas.unbind("<Button-1>")
            elif self.check_draw():
                self.show_message("It's a draw!")
                self.canvas.unbind("<Button-1>")
            else:
                self.current_player = self.players[1] if self.current_player == self.players[0] else self.players[0]
                self.show_message(f"{self.current_player.name}'s turn")

    def check_win(self):
        for i in range(3):
            if self.board[i][0] == self.board[i][1] == self.board[i][2] != ' ':
                return True
            if self.board[0][i] == self.board[1][i] == self.board[2][i] != ' ':
                return True
        if self.board[0][0] == self.board[1][1] == self.board[2][2] != ' ':
            return True
        if self.board[0][2] == self.board[1][1] == self.board[2][0] != ' ':
            return True
        return False

    def check_draw(self):
        for row in self.board:
            if ' ' in row:
                return False
        return True

    def reset_board(self):
        self.board = [[' ' for _ in range(3)] for _ in range(3)]
        self.canvas.delete("all")

    def draw_board(self):
        self.canvas.create_rectangle(0, 0, 300, 300, outline="black", width=2)
        for i in range(1, 3):
            self.canvas.create_line(i * 100, 0, i * 100, 300, fill="black", width=2)
            self.canvas.create_line(0, i * 100, 300, i * 100, fill="black", width=2)

    def draw_mark(self, row, col):
        x = col * 100 + 50
        y = row * 100 + 50
        mark = self.board[row][col]
        self.canvas.create_text(x, y, text=mark, font=("Arial", 50))

    def show_message(self, message):
        messagebox.showinfo("Tic Tac Toe", message)

    def handle_click(self, event):
        row = event.y // 100
        col = event.x // 100
        self.make_move(row, col)

    def play_again(self):
        self.start_game()

class Player:
    def __init__(self, name, mark):
        self.name = name
        self.mark = mark

    def get_move(self):
        # Not implemented for human players
        pass

game = Game()
game.root.mainloop()
```

This code defines the `Game` class that handles the game logic and GUI using tkinter. It also defines the `Player` class to represent the players in the game.

The `Game` class initializes the game state and GUI, and provides methods for starting a new game, handling player moves, checking win/draw conditions, resetting the board, drawing the board on the GUI, showing messages, and handling the "play again" button click.

The `Player` class represents a player with a name and mark. The `get_move()` method is not implemented for human players as it is not needed in this case.

The code also creates an instance of the `Game` class and starts the main event loop to run the game.

To run the game, you will need to have tkinter installed. You can install it using the following command:

**requirements.txt**
```
tkinter
```

Now you can run the game by executing the following command:

```
python game.py
```